package gps

import (
	"bytes"
	"crypto/sha256"
	"io"
	"sort"
)

// HashInputs computes a hash digest of all data in SolveParams and the
// RootManifest that act as function inputs to Solve().
//
// The digest returned from this function is the same as the digest that would
// be included with a Solve() Result. As such, it's appropriate for comparison
// against the digest stored in a lock file, generated by a previous Solve(): if
// the digests match, then manifest and lock are in sync, and a Solve() is
// unnecessary.
//
// (Basically, this is for memoization.)
func (s *solver) HashInputs() (digest []byte) {
	h := sha256.New()
	s.writeHashingInputs(h)

	hd := h.Sum(nil)
	digest = hd[:]
	return
}

func (s *solver) writeHashingInputs(w io.Writer) {
	writeString := func(s string) {
		// Skip zero-length string writes; it doesn't affect the real hash
		// calculation, and keeps misleading newlines from showing up in the
		// debug output.
		if s != "" {
			// All users of writeHashingInputs cannot error on Write(), so just
			// ignore it
			w.Write([]byte(s))
		}
	}

	// Apply overrides to the constraints from the root. Otherwise, the hash
	// would be computed on the basis of a constraint from root that doesn't
	// actually affect solving.
	wc := s.ovr.overrideAll(s.rm.DependencyConstraints().merge(s.rm.TestDependencyConstraints()))

	for _, pd := range wc {
		writeString(string(pd.Ident.ProjectRoot))
		writeString(pd.Ident.Source)
		// FIXME Constraint.String() is a surjective-only transformation - tags
		// and branches with the same name are written out as the same string.
		// This could, albeit rarely, result in erroneously identical inputs
		// when a real change has occurred.
		writeString(pd.Constraint.String())
	}

	// Get the external reach list

	// Write each of the packages, or the errors that were found for a
	// particular subpath, into the hash. We need to do this in a
	// deterministic order, so expand and sort the map.
	var pkgs []PackageOrErr
	for _, perr := range s.rpt.Packages {
		pkgs = append(pkgs, perr)
	}
	sort.Sort(sortPackageOrErr(pkgs))
	for _, perr := range pkgs {
		if perr.Err != nil {
			writeString(perr.Err.Error())
		} else {
			writeString(perr.P.Name)
			writeString(perr.P.CommentPath)
			writeString(perr.P.ImportPath)
			for _, imp := range perr.P.Imports {
				if !isStdLib(imp) {
					writeString(imp)
				}
			}
			for _, imp := range perr.P.TestImports {
				if !isStdLib(imp) {
					writeString(imp)
				}
			}
		}
	}

	// Write any required packages given in the root manifest.
	req := make([]string, 0, len(s.req))
	for pkg := range s.req {
		req = append(req, pkg)
	}
	sort.Strings(req)

	for _, reqp := range req {
		writeString(reqp)
	}

	// Add the ignored packages, if any.
	ig := make([]string, 0, len(s.ig))
	for pkg := range s.ig {
		ig = append(ig, pkg)
	}
	sort.Strings(ig)

	for _, igp := range ig {
		writeString(igp)
	}

	for _, pc := range s.ovr.asSortedSlice() {
		writeString(string(pc.Ident.ProjectRoot))
		if pc.Ident.Source != "" {
			writeString(pc.Ident.Source)
		}
		if pc.Constraint != nil {
			writeString(pc.Constraint.String())
		}
	}

	an, av := s.b.AnalyzerInfo()
	writeString(an)
	writeString(av.String())
}

// bytes.Buffer wrapper that injects newlines after each call to Write().
type nlbuf bytes.Buffer

func (buf *nlbuf) Write(p []byte) (n int, err error) {
	n, _ = (*bytes.Buffer)(buf).Write(p)
	(*bytes.Buffer)(buf).WriteByte('\n')
	return n + 1, nil
}

// HashingInputsAsString returns the raw input data used by Solver.HashInputs()
// as a string.
//
// This is primarily intended for debugging purposes.
func HashingInputsAsString(s Solver) string {
	ts := s.(*solver)
	buf := new(nlbuf)
	ts.writeHashingInputs(buf)

	return (*bytes.Buffer)(buf).String()
}

type sortPackageOrErr []PackageOrErr

func (s sortPackageOrErr) Len() int      { return len(s) }
func (s sortPackageOrErr) Swap(i, j int) { s[i], s[j] = s[j], s[i] }

func (s sortPackageOrErr) Less(i, j int) bool {
	a, b := s[i], s[j]
	if a.Err != nil || b.Err != nil {
		// Sort errors last.
		if b.Err == nil {
			return false
		}
		if a.Err == nil {
			return true
		}
		// And then by string.
		return a.Err.Error() < b.Err.Error()
	}
	// And finally, sort by import path.
	return a.P.ImportPath < b.P.ImportPath
}
