package vsolver

import (
	"crypto/sha256"
	"sort"
)

// HashInputs computes a hash digest of all data in a SolveOpts that are as
// function inputs to Solve().
//
// The digest returned from this function is the same as the digest that would
// be included with a Solve() Result. As such, it's appropriate for comparison
// against the digest stored in a lock file, generated by a previous Solve(): if
// the digests match, then manifest and lock are in sync, and a Solve() is
// unnecessary.
//
// (Basically, this is for memoization.)
func (o SolveOpts) HashInputs() []byte {
	d, dd := o.M.GetDependencies(), o.M.GetDevDependencies()
	p := make(sortedDeps, len(d))
	copy(p, d)
	p = append(p, dd...)

	sort.Stable(p)

	h := sha256.New()
	for _, pd := range p {
		h.Write([]byte(pd.Ident.LocalName))
		h.Write([]byte(pd.Ident.NetworkName))
		h.Write([]byte(pd.Constraint.String()))
	}

	// TODO static analysis
	// TODO overrides
	// TODO aliases
	// TODO ignores
	return h.Sum(nil)
}

type sortedDeps []ProjectDep

func (s sortedDeps) Len() int {
	return len(s)
}

func (s sortedDeps) Swap(i, j int) {
	s[i], s[j] = s[j], s[i]
}

func (s sortedDeps) Less(i, j int) bool {
	return s[i].Ident.less(s[j].Ident)
}
